---
title: "Building footprints from Global ML"
execute:
  echo: false
  message: false
author: "Shrividya Ravi"
date: "2023-02-01"
categories: [data science, urban, india, mumbai, buildings]
image: "image.png"
bibliography: references.bib
csl: ieee.csl
---

```{r}
#| include: false
library(sf)
library(dplyr)
library(ggplot2)
library(osmdata)
```

I've recently learned of the `GlobalML` dataset from Microsoft [@MicrosoftGlobalMLBuildingFootprints2023]. However, the organisation of the data was hard to follow as only a handful of countries have specific data releases. The rest of the world, including India, needed could only be downloaded based on the `quadkey` for the required map tile.

The challenge I faced was figuring out which `quadkey` tile contained the latitude and longitudes I was interested in. Luckily, I found a very useful snippet [@HowConvertLatitude] that makes use of the `pyquadkey2` python package.

```{bash}
#| eval: false
#| echo: true
python3 -m pip install pyquadkey2
python3
```

```{python, python.reticulate = FALSE}
#| eval: false
#| echo: true
from pyquadkey2 import quadkey

def geo_to_qk(latitude, longitude, zoom_level):
    """Convert latitude and longitude to quadkey at specified
    integer  zoom level, returning quadkey as a string
    """
    qk = str(quadkey.from_geo((latitude, longitude), zoom_level))
    return qk

# To get a 9 digit quadkey, the zoom level is 9
geo_to_qk(19.07403, 72.99571, 9)
```

```{r}
#| output: false

# get mumbai polygon for subsetting
mumbai_poly <-  getbb("mumbai india", format_out = "polygon")[[1]] %>% 
  as.data.frame() %>%
  st_as_sf(coords = c("V1", "V2")) %>% 
  # Combine so that whole dataframe becomes one polygon
  st_combine() %>% 
  st_cast("POLYGON") %>% 
  st_set_crs(4326) 
```

```{r}
#| output: false
global_ml <- sf::st_read("~/Documents/global-ml-footprints/part-00055-2cb4a5ad-6652-48b0-a336-f09518f4c9e5.c000.geojson")
```

The `GlobalML` data tiles are based on zoom level 9 so once I had the requisite quadkey (`123300311`), I just had to look up the file containing it in the [data links csv](https://minedbuildings.blob.core.windows.net/global-buildings/dataset-links.csv), to get the following link: `https://minedbuildings.blob.core.windows.net/global-buildings/2022-11-15/global-buildings.geojsonl/RegionName%3DIndia/quadkey%3D123300311/part-00055-2cb4a5ad-6652-48b0-a336-f09518f4c9e5.c000.csv.gz`

For some unknown reason, the `geojson` file is saved as `csv`. So, once the `csv.gz` is downloaded and extracted, the file needs to be renamed from `.csv` to `.geojson` before being read into R with `sf::st_read()`. A quick visualisation shows that the tile gets footprints for Mumbai suburban district and the wider metropolitan region to the east. A different tile will be required for the Mumbai city district.

```{r}
#| out-width: 100%
ggplot() + 
  geom_sf(data = global_ml) + 
  geom_sf(data = mumbai_poly, fill = NA, size = 1, colour = "red") + 
  theme_minimal()
```
